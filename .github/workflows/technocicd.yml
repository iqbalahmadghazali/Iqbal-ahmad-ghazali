name: CI/CD to AWS EKS on Tag Push

on:
  push:
    tags:
      - 'v*'   # Trigger hanya saat push tag seperti v1.0.0, v2.1.3, dll

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${GITHUB_REF_NAME}"
          docker build -t $IMAGE .
          docker push $IMAGE

  setup:
    name: Configure kubeconfig for EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Delete old Kubernetes resources
        run: |
          kubectl delete -f /kubernetes/deploy.yaml
          kubectl delete -f /kubernetes/service.yaml

      - name: Deploy new version to EKS
        run: |
          sed -i 's|aws_access_key|${{ secrets.AWS_ACCESS_KEY_ID }}|g' kubernetes/deploy.yaml
          sed -i 's|aws_secret_access_key|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g' kubernetes/deploy.yaml
          sed -i 's|aws_session_token|${{ secrets.AWS_SESSION_TOKEN }}|g' kubernetes/deploy.yaml
          sed -i 's|aws_region|${{ secrets.AWS_REGION }}|g' kubernetes/deploy.yaml
          sed -i 's|athena_db|${{ secrets.ATHENA_DB }}|g' kubernetes/deploy.yaml
          sed -i 's|s3_staging_dir|${{ secrets.S3_STAGING_DIR }}|g' kubernetes/deploy.yaml
          sed -i 's|flask_secret_key|${{ secrets.FLASK_SECRET_KEY }}|g' kubernetes/deploy.yaml
          sed -i 's|api_gateway_url|${{ secrets.API_GATEWAY_URL }}|g' kubernetes/deploy.yaml
          sed -i 's|sns_topic_arn|${{ secrets.SNS_TOPIC_ARN }}|g' kubernetes/deploy.yaml
          sed -i 's|athena_schema_name|${{ secrets.ATHENA_SCHEMA_NAME }}|g' kubernetes/deploy.yaml
          
          kubectl apply -f kubernetes/deploy.yaml
          kubectl apply -f kubernetes/service.yaml
          
